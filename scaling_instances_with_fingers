#Scaling and Descaling of Instances using Hand Detection that are attached and detached to ELB Load Balancer
#!/usr/bin/env python
import cv2
import boto3
import time
from cvzone.HandTrackingModule import HandDetector

# Initialize AWS resources
ec2 = boto3.resource('ec2')
elb = boto3.client('elbv2')
allOS = []

# Constants
AMI_ID = "ami-0a2acf24c0d86e927"
INSTANCE_TYPE = "t2.micro"
SECURITY_GROUP_ID = 'sg-0072cb1b72ca4eeaf'
TARGET_GROUP_ARN = 'arn:aws:elasticloadbalancing:ap-south-1:881559863141:targetgroup/testtg/5eb53fb428255398'

def launch_instance(times):
    try:
        for _ in range(times):
            instances = ec2.create_instances(
                ImageId=AMI_ID,
                MinCount=1,
                MaxCount=1,
                InstanceType=INSTANCE_TYPE,
                SecurityGroupIds=[SECURITY_GROUP_ID],
            )
            instance_id = instances[0].id
            allOS.append(instance_id)
            time.sleep(30)  # Wait for the instance to initialize
            elb.register_targets(
                TargetGroupArn=TARGET_GROUP_ARN,
                Targets=[{'Id': instance_id}],
            )
            print(f"Instance {instance_id} launched. Total OS: {len(allOS)}")
    except Exception as e:
        print(f"Error launching instance: {e}")

def terminate_instance(times):
    try:
        for _ in range(times):
            if allOS:
                instance_id = allOS.pop()
                ec2.instances.filter(InstanceIds=[instance_id]).terminate()
                elb.deregister_targets(
                    TargetGroupArn=TARGET_GROUP_ARN,
                    Targets=[{'Id': instance_id}],
                )
                print(f"Instance {instance_id} terminated. Remaining OS: {len(allOS)}")
            else:
                print("No more OS is running")
                break
    except Exception as e:
        print(f"Error terminating instance: {e}")

def main():
    # Initialize hand detector
    detector = HandDetector(maxHands=1, detectionCon=0.8)
    # Initialize video capture
    cap = cv2.VideoCapture(0)

    try:
        while True:
            ret, img = cap.read()
            if not ret:
                print("Failed to capture image")
                break

            cv2.imshow("Img", img)
            if cv2.waitKey(1000) == 13:  # Enter key to exit
                break

            hands = detector.findHands(img, draw=False)
            if hands:
                hand = hands[0]
                lmlist = hand["lmList"]
                handType = hand["type"]  # "Left" or "Right"

                if lmlist:
                    fingerup = detector.fingersUp(hand)
                    num_fingers_up = fingerup.count(1)
                    print(f"HandType: {handType}, Fingers Up: {num_fingers_up}")

                    if handType == "Right" and num_fingers_up > 0:
                        print(f"Right hand detected with {num_fingers_up} fingers up. Launching instances...")
                        launch_instance(num_fingers_up)
                    elif handType == "Left" and num_fingers_up > 0:
                        print(f"Left hand detected with {num_fingers_up} fingers up. Terminating instances...")
                        terminate_instance(num_fingers_up)
    finally:
        cap.release()
        cv2.destroyAllWindows()

if __name__ == "__main__":
    main()

